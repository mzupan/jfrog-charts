kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "artifactory-ha.fullname" . }}-bs
  labels:
    app: {{ template "artifactory-ha.name" . }}
    chart: {{ template "artifactory-ha.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
data:
  binarystore.xml: |-
{{- if eq .Values.artifactory.persistence.type "aws-s3" }}
    <!-- AWS S3 -->
    <config version="2">
        <chain> <!--template="cluster-s3"-->
            <provider id="cache-fs" type="cache-fs">
                <provider id="sharding-cluster" type="sharding-cluster">
                    <sub-provider id="eventual-cluster" type="eventual-cluster">
                        <provider id="retry-s3" type="retry">
                            <provider id="s3" type="s3"/>
                        </provider>
                    </sub-provider>
                    <dynamic-provider id="remote" type="remote"/>
                </provider>
            </provider>
        </chain>

        <!-- Set max cache-fs size -->
        <provider id="cache-fs" type="cache-fs">
            <maxCacheSize>{{ .Values.artifactory.persistence.maxCacheSize }}</maxCacheSize>
        </provider>

        <provider id="eventual-cluster" type="eventual-cluster">
            <zone>local</zone>
        </provider>

        <provider id="remote" type="remote">
            <checkPeriod>30</checkPeriod>
            <timeout>10000</timeout>
            <zone>remote</zone>
        </provider>

        <provider id="sharding-cluster" type="sharding-cluster">
            <readBehavior>crossNetworkStrategy</readBehavior>
            <writeBehavior>crossNetworkStrategy</writeBehavior>
            <redundancy>{{ .Values.artifactory.persistence.redundancy }}</redundancy>
            <property name="zones" value="local,remote"/>
        </provider>

        <provider id="s3" type="s3">
            <endpoint>{{ .Values.artifactory.persistence.awsS3.endpoint }}</endpoint>
            <refreshCredentials>{{ .Values.artifactory.persistence.awsS3.refreshCredentials }}</refreshCredentials>
            <testConnection>{{ .Values.artifactory.persistence.awsS3.testConnection }}</testConnection>
            <httpsOnly>true</httpsOnly>
            <region>{{ .Values.artifactory.persistence.awsS3.region }}</region>
            <bucketName>{{ .Values.artifactory.persistence.awsS3.bucketName }}</bucketName>
            <identity>{{ .Values.artifactory.persistence.awsS3.identity }}</identity>
            <credential>{{ .Values.artifactory.persistence.awsS3.credential }}</credential>
            <path>{{ .Values.artifactory.persistence.awsS3.path }}</path>
            {{- range $key, $value := .Values.artifactory.persistence.awsS3.properties }}
            <property name="{{ $key }}" value="{{ $value }}"/>
            {{- end }}
        </provider>
    </config>
{{- end }}
